---
title: "static_model"
author: "Mateus Aguilar"
date: "`r format(Sys.Date(), '%d-%m-%Y')`"
output: html_document
---
```{r}
#rm(list=ls())
```

```{r}
## unloading FootStats (problema com o "predict")
unloadNamespace("FootStats")
```

```{r Modelo binomal, include=FALSE}
binom <- glmmTMB(gf ~ (0 + atk + home | team_name) + (0 + def | opponent), 
                data = df_train, 
                family = nbinom2(link = 'log'))
summary(binom)
a = ranef(binom)
```

```{r Fatores}
atk = data.frame(atk = a$cond$team_name$atk, team_name = row.names(a$cond$team_name))
def = data.frame(a$cond$opponent, opponent = row.names(a$cond$opponent))
home = data.frame(home = a$cond$team_name$home, team_name = row.names(a$cond$team_name))
```

```{r}
c = coef(binom)
#d = c$cond$team_name[1, c("(Intercept)", "home")]
d = c$cond$team_name[1, c("(Intercept)")]
vars <- data.frame(model.matrix(binom)) 
#vars2 <- data.frame('Intercept' = vars[,1] * d[1,1], 'home' =  vars[,2] * d[1,2])
vars2 <- data.frame('Intercept' = vars[,1] * d[1])

table <- df_train %>% 
  select(gf, ga, round, venue, team_name, opponent) %>% 
  bind_cols(vars2) %>%
  bind_cols(data.frame(Predito = predict(binom))) %>% 
  merge(atk, by = 'team_name') %>% 
  merge(def, by = 'opponent') %>% 
  merge(home, by = 'team_name')

#View(table)
```

```{r}
df_test <- df_test %>% 
  select(gf, ga, round, venue, team_name, opponent, home, atk, def, resultado)

# Previsões para gols marcados (gf_hat)
df_test$gf_hat <- predict(binom, df_test, type = "response")

# Criar um novo dataframe para prever gols sofridos (invertendo times)
df_test_ga <- df_test
df_test_ga$team_name <- df_test$opponent
df_test_ga$opponent <- df_test$team_name
df_test_ga <- df_test_ga %>% rename(ga_hat = 'gf_hat')

#df_test$ga_hat <- df_test_ga$gf_hat

df_test_ga <- df_test_ga %>% 
  select(round, team_name, opponent, ga_hat)
df_test <- merge(df_test, df_test_ga, by = c('round', 'team_name', 'opponent'))

# Previsão para gols sofridos (ga_hat)
#df_test$ga_hat <- predict(fit1, df_test_ga, type = "response")

df_test2 <- df_test %>% subset(venue == 'Home')
df_test2$gd_hat <- df_test2$gf_hat - df_test2$ga_hat

```

```{r}
df_train <- df_train %>% 
  select(gf, ga, round, venue, team_name, opponent, home, atk, def, resultado)

# Previsões para gols marcados (gf_hat)
df_train$gf_hat <- predict(binom, df_train, type = "response")

# Criar um novo dataframe para prever gols sofridos (invertendo times)
df_train_ga <- df_train
df_train_ga$team_name <- df_train$opponent
df_train_ga$opponent <- df_train$team_name
df_train_ga <- df_train_ga %>% rename(ga_hat = 'gf_hat')

#df_train$ga_hat <- df_train_ga$gf_hat

df_train_ga <- df_train_ga %>% 
  select(round, team_name, opponent, ga_hat)

# Previsão para gols sofridos (ga_hat)
#df_train$ga_hat <- predict(fit1, df_train_ga, type = "response")

df_train <- merge(df_train, df_train_ga, by = c('round', 'team_name', 'opponent'))
df_train2 <- df_train %>% subset(venue == 'Home')
df_train2$gd_hat <- df_train2$gf_hat - df_train2$ga_hat
```


```{r}
# Categorização de variáveis
df_test2$Y <- factor(df_test2$resultado, 
                     levels = c(0, 1, 2), 
                     labels = c("L", "D", "W"))
df_train2$Y <- factor(df_train2$resultado, 
                     levels = c(0, 1, 2), 
                     labels = c("L", "D", "W"))
```


```{r, Multiclasse}
# Classificador na base de treino

G = 100
grid <- seq(min(df_train2$gd_hat), 
            max(df_train2$gd_hat), 
            length.out = G)

M <- matrix(0, nrow = G, ncol = G)


for(i in 1:G){
  for(j in i:G){
      
    M[i, j] =
      ( sum( (df_train2$gd_hat <= grid[i]) & (df_train2$Y == 'L') ) / sum(df_train2$Y == 'L') + 
      sum( (df_train2$gd_hat > grid[i] & df_train2$gd_hat < grid[j]) & (df_train2$Y == 'D') ) / sum((df_train2$Y == 'D')) + 
      sum( (df_train2$gd_hat >= grid[j]) & (df_train2$Y == 'W') ) / sum(df_train2$Y == 'W') ) / 3
    
  }
}


# Encontrando os melhores limiares (t1 e t2) para maximizar a acurácia
indices_max <- which(M == max(M, na.rm = TRUE), arr.ind = TRUE)
#i_max <- indices_max[1, "row"]
#j_max <- indices_max[1, "col"]

#t1 <- grid[j_max]
#t2 <- grid[i_max]
#t1  
#t2  


```



```{r}
taus = matrix(NA, nrow = NROW(indices_max), ncol = 2)
for(i in 1:NROW(indices_max)){
  taus[i, ] = c(grid[indices_max[i, 1]], grid[indices_max[i, 2]])
  
}

taus_diff = taus[, 2] - taus[, 1]
tau_max_diff = which(taus_diff == max(taus_diff))
t1 = taus[tau_max_diff, 1]
t2 = taus[tau_max_diff, 2]
t1; t2

# Classificação final com os limiares otimizados
df_train2$y_hat <- factor(ifelse(df_train2$gd_hat <= t1, 'L',
                                ifelse(df_train2$gd_hat >= t2, 'W', 'D')),
                                levels = c("L", "D", "W"))
```


```{r}
# res_acc <- optimizar_thresholds_acc(df_train2, grid)
# res_f1  <- optimizar_thresholds_f1(df_train2, grid)
# 
# # Comparar as melhores tuplas e scores
# res_acc$best_thresholds
# res_f1$best_thresholds
# 
# print(paste("Acurácia otimizada:", round(res_acc$score, 3)))
# print(paste("F1 macro otimizado:", round(res_f1$score, 3)))
# 
# # Ver matrizes de confusão
# res_acc$confusion_matrix
# res_f1$confusion_matrix
```


```{r}
# Matriz de Confusão
conf_matrix <- table(Real = df_train2$Y, Predito = df_train2$y_hat)
print(conf_matrix)

# Cálculo da Acurácia Geral
acc = sum(diag(conf_matrix))/sum(conf_matrix)
print(paste("Acurácia geral:", acc))
```



```{r, Multiclasse}
# Classificador na Base de teste

G = 100
grid <- seq(min(df_test2$gd_hat), 
            max(df_test2$gd_hat), 
            length.out = G)

M <- matrix(0, nrow = G, ncol = G)


for(i in 1:G){
  for(j in i:G){
      
    M[i, j] =
      ( sum( (df_test2$gd_hat <= grid[i]) & (df_test2$Y == 'L') ) / sum(df_test2$Y == 'L') + 
      sum( (df_test2$gd_hat > grid[i] & df_test2$gd_hat < grid[j]) & (df_test2$Y == 'D') ) / sum((df_test2$Y == 'D')) + 
      sum( (df_test2$gd_hat >= grid[j]) & (df_test2$Y == 'W') ) / sum(df_test2$Y == 'W') ) / 3
    
  }
}


# Encontrando os melhores limiares (t1 e t2) para maximizar a acurácia
indices_max <- which(M == max(M, na.rm = TRUE), arr.ind = TRUE)
#i_max <- indices_max[1, "row"]
#j_max <- indices_max[1, "col"]

#t1 <- grid[j_max]
#t2 <- grid[i_max]
#t1  
#t2  


```



```{r}
taus = matrix(NA, nrow = NROW(indices_max), ncol = 2)
for(i in 1:NROW(indices_max)){
  taus[i, ] = c(grid[indices_max[i, 1]], grid[indices_max[i, 2]])
  
}

taus_diff = taus[, 2] - taus[, 1]
tau_max_diff = which(taus_diff == min(taus_diff))
t1 = taus[tau_max_diff, 1]
t2 = taus[tau_max_diff, 2]
t1; t2

# Classificação final com os limiares otimizados
df_test2$y_hat <- factor(ifelse(df_test2$gd_hat <= t1, 'L',
                                ifelse(df_test2$gd_hat >= t2, 'W', 'D')),
                                levels = c("L", "D", "W"))
```

```{r Matriz de confusão e Acurácia}
# Classificação final com os limiares otimizados
df_test2$y_hat <- factor(ifelse(df_test2$gd_hat <= t1, 'L',
                                ifelse(df_test2$gd_hat >= t2, 'W', 'D')),
                                levels = c("L", "D", "W"))

# Matriz de Confusão
conf_matrix <- table(Real = df_test2$Y, Predito = df_test2$y_hat)
print(conf_matrix)

# Cálculo da Acurácia Geral
acc = sum(diag(conf_matrix))/sum(conf_matrix)
print(paste("Acurácia geral:", acc))
```

