"0","library(pROC)"
"0","df_test2 <- df_test2 %>%"
"0","  mutate(win = as.numeric(resultado == 2),"
"0","         draw = as.numeric(resultado == 1), "
"0","         loss = as.numeric(resultado == 0))  "
"0",""
"0","# Criar curvas ROC para cada classe"
"0","roc_win <- roc(df_test2$is_win, df_test2$gd_hat, levels = c(0,1))   # Para vitórias"
"2","Setting direction: controls > cases
"
"0","roc_draw <- roc(df_test2$is_draw, df_test2$gd_hat, levels = c(0,1)) # Para empates"
"2","Setting direction: controls < cases
"
"0","roc_loss <- roc(df_test2$is_loss, df_test2$gd_hat, levels = c(0,1)) # Para derrotas"
"2","Setting direction: controls > cases
"
"0","# Encontrar os melhores thresholds para separação das classes"
"0","best_threshold_win <- coords(roc_win, ""best"", ret = ""threshold"")"
"0","best_threshold_draw <- coords(roc_draw, ""best"", ret = ""threshold"")"
"0","best_threshold_loss <- coords(roc_loss, ""best"", ret = ""threshold"")"
"0",""
"0","# Atualizar os thresholds com os valores encontrados"
"0","t1 <- as.numeric(best_threshold_draw)  "
"0","t2 <- as.numeric(best_threshold_win)"
"0","cat('Win: \n', t1, 'Loss: \n ', t2)"
"1","Win: 
"
"1"," "
"1","0.0684193"
"1"," "
"1","Loss: 
 "
"1"," "
"1","0.2238734"
